{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shader Lab \u00b6 1. Introduction \u00b6 Shader Lab designed as a bulletin board system based shader assets repository aiming for fast and simple shader editing, sharing, discussion and advising in one platform. In this project, the main schema of the web styling will follow win 11 rounded corners and our team will implement: The user system including follower management and message notification; Basic posts system including rank, vote, tag, auto recommend; And a shader editor with real-time renderer based on WebGL including 3d models rendering with vertex shader and fragment shader and the post processing like pure quad with double triangle rendering with fragment shader only. 2. User Interface \u00b6 Prototype design by Figma: Login Panel Main Panel Editor Panel 3. Database \u00b6 Users - login and logon, fundamental data. Posts - shaders data, comments, and tag system. 4. Development plans \u00b6 Tools: Frontend - native JS + HTML + CSS. Backend - crate prototype by Node.js under Express.js framework. database - MySQL for data collection. Division of work: Member1 - UI Design and Layout. Member2 - Layout self-adaptive and MySQL database setup. Member3 - Coding and testing. Member4 - Cooperate with M3 on coding.","title":"Home"},{"location":"#shader-lab","text":"","title":"Shader Lab"},{"location":"#1-introduction","text":"Shader Lab designed as a bulletin board system based shader assets repository aiming for fast and simple shader editing, sharing, discussion and advising in one platform. In this project, the main schema of the web styling will follow win 11 rounded corners and our team will implement: The user system including follower management and message notification; Basic posts system including rank, vote, tag, auto recommend; And a shader editor with real-time renderer based on WebGL including 3d models rendering with vertex shader and fragment shader and the post processing like pure quad with double triangle rendering with fragment shader only.","title":"1.   Introduction"},{"location":"#2-user-interface","text":"Prototype design by Figma: Login Panel Main Panel Editor Panel","title":"2.   User Interface"},{"location":"#3-database","text":"Users - login and logon, fundamental data. Posts - shaders data, comments, and tag system.","title":"3.   Database"},{"location":"#4-development-plans","text":"Tools: Frontend - native JS + HTML + CSS. Backend - crate prototype by Node.js under Express.js framework. database - MySQL for data collection. Division of work: Member1 - UI Design and Layout. Member2 - Layout self-adaptive and MySQL database setup. Member3 - Coding and testing. Member4 - Cooperate with M3 on coding.","title":"4.   Development plans"},{"location":"ShaderLabAPI/","text":"Backend design \u00b6 language Specification \u00b6 Module Specification server CommonJs Choose common js because of the better echo system. Use ESM will cause error in some automatic build tools. Basic set up \u00b6 token design \u00b6 To avoid anonymity visit on a heavy api, such as two table select by union or join and update large blob assets would be quite dangerous. jwt with simple info could limit visits. Token design: Data Datatype Usage id number User Id Weakness: When a token expired, api will directly decline user request. Here we designed a two layer authentication to improve user experience. sequenceDiagram participant client participant server participant storage client ->>+ server: /api/user/singin {account, password} server ->> server: generate token by jwt Note right of client: singup server -->>- client: response with token client ->> server: Request /api/* alt is valid token client ->>+ server: add token under Authorization header alt is safe time server ->> server: vertify else is unsafe time server ->> storage: add refresh token storage -->> server: response with refresh token or error server -->> client: resfresh {state, new token} end server -->>- client: appropriate response else is invalid token server -->> client: 404 meessage client -->> client: clean token data & refresh page end opt Signout client ->>+ server: /api/user/singout server ->> storage: remove storage server -->>- client: response client -->> client: clean token data & refresh page end user permission \u00b6 Admin User Visitor /admin/* X /api/* X X X /* X X X admin -> /api*, /admin* user -> /api* visitor -> /* exclude /admin* and /api/* 3 level design would be good enough to. graph LR; Visitor --> User --> Admin Structure design \u00b6 sequenceDiagram participant model participant handle participant middle participant routes routes -->> middle: no token (delined) routes ->> middle: vertify or login middle ->> handle: request to valid data handle ->> model: query from model model -->> handle: error or json handle -->> routes: update token? handle -->> routes: error handle and resoponse graph TD; ModelHandle ----> Mysql SearchHandle --> UserHandle SearchHandle --> PostHandle SearchHandle --> TagHandle SearchHandle --> TopicHandle UserHandle ---> User PostHandle --> TagHandle PostHandle --> TopicHandle PostHandle ---> Post TagHandle --> Tag TopicHandle --> Topic graph LR; ControllerStart --> Validator --> Handle --> HandleError --> ValidatorError --> ControllerEnd Validator -.-> ValidatorError Handle -.-> HandleError -.-> ControllerEnd graph TD; UserAPI --> UserController --> UserHandle PostAPI --> PostController --> PostHandle TagAPI --> TagController --> TagHandle TopicAPI --> TopicController --> TopicHandle SearchAPI --> SearchController --> SearchHandle sequenceDiagram participant req participant controller participant handle participant res req ->> controller: params is valid validator -->> res: throw and catch error validator ->> handle: deal with the safe data handle -->> controller: check the data type safe handle ->> res: return back the same data validator -->> res: throw and catch erro","title":"Backend design"},{"location":"ShaderLabAPI/#backend-design","text":"","title":"Backend design"},{"location":"ShaderLabAPI/#language-specification","text":"Module Specification server CommonJs Choose common js because of the better echo system. Use ESM will cause error in some automatic build tools.","title":"language Specification"},{"location":"ShaderLabAPI/#basic-set-up","text":"","title":"Basic set up"},{"location":"ShaderLabAPI/#token-design","text":"To avoid anonymity visit on a heavy api, such as two table select by union or join and update large blob assets would be quite dangerous. jwt with simple info could limit visits. Token design: Data Datatype Usage id number User Id Weakness: When a token expired, api will directly decline user request. Here we designed a two layer authentication to improve user experience. sequenceDiagram participant client participant server participant storage client ->>+ server: /api/user/singin {account, password} server ->> server: generate token by jwt Note right of client: singup server -->>- client: response with token client ->> server: Request /api/* alt is valid token client ->>+ server: add token under Authorization header alt is safe time server ->> server: vertify else is unsafe time server ->> storage: add refresh token storage -->> server: response with refresh token or error server -->> client: resfresh {state, new token} end server -->>- client: appropriate response else is invalid token server -->> client: 404 meessage client -->> client: clean token data & refresh page end opt Signout client ->>+ server: /api/user/singout server ->> storage: remove storage server -->>- client: response client -->> client: clean token data & refresh page end","title":"token design"},{"location":"ShaderLabAPI/#user-permission","text":"Admin User Visitor /admin/* X /api/* X X X /* X X X admin -> /api*, /admin* user -> /api* visitor -> /* exclude /admin* and /api/* 3 level design would be good enough to. graph LR; Visitor --> User --> Admin","title":"user permission"},{"location":"ShaderLabAPI/#structure-design","text":"sequenceDiagram participant model participant handle participant middle participant routes routes -->> middle: no token (delined) routes ->> middle: vertify or login middle ->> handle: request to valid data handle ->> model: query from model model -->> handle: error or json handle -->> routes: update token? handle -->> routes: error handle and resoponse graph TD; ModelHandle ----> Mysql SearchHandle --> UserHandle SearchHandle --> PostHandle SearchHandle --> TagHandle SearchHandle --> TopicHandle UserHandle ---> User PostHandle --> TagHandle PostHandle --> TopicHandle PostHandle ---> Post TagHandle --> Tag TopicHandle --> Topic graph LR; ControllerStart --> Validator --> Handle --> HandleError --> ValidatorError --> ControllerEnd Validator -.-> ValidatorError Handle -.-> HandleError -.-> ControllerEnd graph TD; UserAPI --> UserController --> UserHandle PostAPI --> PostController --> PostHandle TagAPI --> TagController --> TagHandle TopicAPI --> TopicController --> TopicHandle SearchAPI --> SearchController --> SearchHandle sequenceDiagram participant req participant controller participant handle participant res req ->> controller: params is valid validator -->> res: throw and catch error validator ->> handle: deal with the safe data handle -->> controller: check the data type safe handle ->> res: return back the same data validator -->> res: throw and catch erro","title":"Structure design"},{"location":"ShaderLabAPIAuth/","text":"Auth API \u00b6 Analyze \u00b6 The auth apis provided regular auth and third party auth. The regular auth will do the signin ( POST ), signup ( POST ), reset ( PUT ) action and get a token in three different action. The third party auth will get a token, authorization persistence should handle with third party oauth2.0 provider. Auth table should require auth_id , auth_name auth_email , auth_token , auth_type (local, sns etc,). In github, user contain two different method, user could show auth email(bind with third party) or github email balabalabala@users.noreply.github.com . Here we want to do the same thing, but leave the local email empty. Procedure \u00b6 Local Auth \u00b6 sequenceDiagram participant client participant server participant database client ->>+ server: /api/user/singin {account, password} server ->> server: generate token by jwt Note right of client: singup server -->>- client: response with token client ->> server: Request /api/* alt is valid token client ->>+ server: add token under Authorization header alt is safe time server ->> server: vertify else is unsafe time server ->> database: add refresh token database -->> server: response with refresh token or error server -->> client: resfresh {state, new token} end server -->>- client: appropriate response else is invalid token server -->> client: 404 meessage client -->> client: clean token data & refresh page end opt Signout client ->>+ server: /api/user/singout server ->> database: remove token server -->>- client: response client -->> client: clean token data & refresh page end Third Party Auth \u00b6 sequenceDiagram participant client participant server participant sns server ->> sns: Redirect to sns sns ->> client: Require user login and permission client ->> sns: user's secrect sns -->> server: Redirect back to server and a code server ->> sns: use code and request a token sns -->> server: token server ->> sns: user's data sns ->> server: data server ->> client: recalculated data GitHub configuration steps: Login to GitHub . Settings => Developer settings => OAuth Apps => Register a new application Configure follows GitHub guidance and get Client-ID and Client-Secret Combine url together and redirect for user REFERER https://github.com/login/oauth/authorize? scope=user:email& client_id={Client-ID}& redirect_uri={ShaderLab-API} Then, user will do something and get a Code from GitHub http://{ShaderLab-API}?code=BALABALABALA which will handle in auth api at ctx.request.query.code; Require token from GitHub POST https://github.com/login/oauth/access_token? client_id={Client-ID}& client_secret={Client-Secret}& code=${Code} headers: { accept: \"application/json\" } and get a accessToken from GitHub Then get email username@github.com from GitHub GET https://api.github.com/user headers: { accept: \"application/json\", Authorization: `token ${accessToken}` } Google configuration steps: Login to Google . Left navbar => API and services => OAuth consent screen Configure follows Google guidance and get Client-ID and Client-Secret Special way : use Google's library Combine url together and redirect for user official guidance REFERER https://accounts.google.com/o/oauth2/v2/auth? scope=https://www.googleapis.com/auth/userinfo.email& include_granted_scopes=true& response_type=token& redirect_uri={ShaderLab-API}& client_id={Client-ID} Then, user will do something and get a Code from Google http://{ShaderLab-API}?code=BALABALABALA which will handle in auth api at ctx.request.query.code; Require token from Google POST https://oauth2.googleapis.com/token? client_id={Client-ID}& client_secret={Client-Secret}& code=${Code}& grant_type=authorization_code headers: { accept: \"application/json\" } and get a accessToken from Google GET https://www.googleapis.com/oauth2/v2/userinfo headers: { accept: \"application/json\", Authorization: `Bearer ${accessToken}` }","title":"Auth API"},{"location":"ShaderLabAPIAuth/#auth-api","text":"","title":"Auth API"},{"location":"ShaderLabAPIAuth/#analyze","text":"The auth apis provided regular auth and third party auth. The regular auth will do the signin ( POST ), signup ( POST ), reset ( PUT ) action and get a token in three different action. The third party auth will get a token, authorization persistence should handle with third party oauth2.0 provider. Auth table should require auth_id , auth_name auth_email , auth_token , auth_type (local, sns etc,). In github, user contain two different method, user could show auth email(bind with third party) or github email balabalabala@users.noreply.github.com . Here we want to do the same thing, but leave the local email empty.","title":"Analyze"},{"location":"ShaderLabAPIAuth/#procedure","text":"","title":"Procedure"},{"location":"ShaderLabAPIAuth/#local-auth","text":"sequenceDiagram participant client participant server participant database client ->>+ server: /api/user/singin {account, password} server ->> server: generate token by jwt Note right of client: singup server -->>- client: response with token client ->> server: Request /api/* alt is valid token client ->>+ server: add token under Authorization header alt is safe time server ->> server: vertify else is unsafe time server ->> database: add refresh token database -->> server: response with refresh token or error server -->> client: resfresh {state, new token} end server -->>- client: appropriate response else is invalid token server -->> client: 404 meessage client -->> client: clean token data & refresh page end opt Signout client ->>+ server: /api/user/singout server ->> database: remove token server -->>- client: response client -->> client: clean token data & refresh page end","title":"Local Auth"},{"location":"ShaderLabAPIAuth/#third-party-auth","text":"sequenceDiagram participant client participant server participant sns server ->> sns: Redirect to sns sns ->> client: Require user login and permission client ->> sns: user's secrect sns -->> server: Redirect back to server and a code server ->> sns: use code and request a token sns -->> server: token server ->> sns: user's data sns ->> server: data server ->> client: recalculated data GitHub configuration steps: Login to GitHub . Settings => Developer settings => OAuth Apps => Register a new application Configure follows GitHub guidance and get Client-ID and Client-Secret Combine url together and redirect for user REFERER https://github.com/login/oauth/authorize? scope=user:email& client_id={Client-ID}& redirect_uri={ShaderLab-API} Then, user will do something and get a Code from GitHub http://{ShaderLab-API}?code=BALABALABALA which will handle in auth api at ctx.request.query.code; Require token from GitHub POST https://github.com/login/oauth/access_token? client_id={Client-ID}& client_secret={Client-Secret}& code=${Code} headers: { accept: \"application/json\" } and get a accessToken from GitHub Then get email username@github.com from GitHub GET https://api.github.com/user headers: { accept: \"application/json\", Authorization: `token ${accessToken}` } Google configuration steps: Login to Google . Left navbar => API and services => OAuth consent screen Configure follows Google guidance and get Client-ID and Client-Secret Special way : use Google's library Combine url together and redirect for user official guidance REFERER https://accounts.google.com/o/oauth2/v2/auth? scope=https://www.googleapis.com/auth/userinfo.email& include_granted_scopes=true& response_type=token& redirect_uri={ShaderLab-API}& client_id={Client-ID} Then, user will do something and get a Code from Google http://{ShaderLab-API}?code=BALABALABALA which will handle in auth api at ctx.request.query.code; Require token from Google POST https://oauth2.googleapis.com/token? client_id={Client-ID}& client_secret={Client-Secret}& code=${Code}& grant_type=authorization_code headers: { accept: \"application/json\" } and get a accessToken from Google GET https://www.googleapis.com/oauth2/v2/userinfo headers: { accept: \"application/json\", Authorization: `Bearer ${accessToken}` }","title":"Third Party Auth"},{"location":"ShaderLabAPIPost/","text":"","title":"Post API"},{"location":"ShaderLabAPITag/","text":"Tag API \u00b6 Analyze \u00b6 In tag api should have search, create (should integrate into post), update feature. The tag part should focus on the tag database. API Introduction Get /api/tag Get all the tags Put /api/tag Update the tag","title":"Tag API"},{"location":"ShaderLabAPITag/#tag-api","text":"","title":"Tag API"},{"location":"ShaderLabAPITag/#analyze","text":"In tag api should have search, create (should integrate into post), update feature. The tag part should focus on the tag database. API Introduction Get /api/tag Get all the tags Put /api/tag Update the tag","title":"Analyze"},{"location":"ShaderLabAPITopic/","text":"Topic API \u00b6 Analyze \u00b6 In topic api should have search, create, update, (remove? ) feature. The topic part should focus on the topic database. API Introduction Get /api/topic Get all the topic Post /api/topic Create a topic Put /api/topic Update the topic Get /api/topic/:topic Get a topic by id Put /api/topic/image/:id Update the topic image Put /api/topic/description/:id Update the topic description","title":"Topic API"},{"location":"ShaderLabAPITopic/#topic-api","text":"","title":"Topic API"},{"location":"ShaderLabAPITopic/#analyze","text":"In topic api should have search, create, update, (remove? ) feature. The topic part should focus on the topic database. API Introduction Get /api/topic Get all the topic Post /api/topic Create a topic Put /api/topic Update the topic Get /api/topic/:topic Get a topic by id Put /api/topic/image/:id Update the topic image Put /api/topic/description/:id Update the topic description","title":"Analyze"},{"location":"ShaderLabAPIUser/","text":"User API \u00b6 Analyze \u00b6 In user api should have register, login, update, abort feature. The user part have to focus on the user database. API design API Introduction Get /api/user Get the all the user Get /api/user/:id Get a user with id Post /api/user/signup Register Post /api/user/signin Login Put /api/user/avatar Update user avatar Put /api/user/email Update user email Put /api/user/password Update user password Delete /api/user/signout Logout user Delete /api/user/:id Abort user Get /api/user/restore/:id Restore user User password could have no length limit. - md 5 could compress to 32 character always.","title":"User API"},{"location":"ShaderLabAPIUser/#user-api","text":"","title":"User API"},{"location":"ShaderLabAPIUser/#analyze","text":"In user api should have register, login, update, abort feature. The user part have to focus on the user database. API design API Introduction Get /api/user Get the all the user Get /api/user/:id Get a user with id Post /api/user/signup Register Post /api/user/signin Login Put /api/user/avatar Update user avatar Put /api/user/email Update user email Put /api/user/password Update user password Delete /api/user/signout Logout user Delete /api/user/:id Abort user Get /api/user/restore/:id Restore user User password could have no length limit. - md 5 could compress to 32 character always.","title":"Analyze"},{"location":"ShaderLabBuild/","text":"Build CI/CD design \u00b6 Here we want to make a GitHub pipeline, when at the beginning of the week, pull git submodules, and copy files under this repository.","title":"Build CI/CD design"},{"location":"ShaderLabBuild/#build-cicd-design","text":"Here we want to make a GitHub pipeline, when at the beginning of the week, pull git submodules, and copy files under this repository.","title":"Build CI/CD design"},{"location":"ShaderLabPage/","text":"Page design \u00b6 language Specification \u00b6 Module Specification browser ESM For practicing new ES Specification object orientation program, we use the class base coding.","title":"Page design"},{"location":"ShaderLabPage/#page-design","text":"","title":"Page design"},{"location":"ShaderLabPage/#language-specification","text":"Module Specification browser ESM For practicing new ES Specification object orientation program, we use the class base coding.","title":"language Specification"},{"location":"ShaderLabPageEditor/","text":"Feature \u00b6 The core feature of editor page should have two key features: editor, comment. In the web page, should have entrance to home page and login page (conditional). Analyze \u00b6 Navigation Bar: Elements under navigation bar has two stage: - normal -> mini icon. - large -> panel and large icon. Left Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav left.css sl-nav__bar True Enable Disable Right Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav right.css sl-nav__bar True Enable Disable Message Entry nav right.css sl-nav__bar True Disable Enable History Entry nav right.css sl-nav__bar True Disable Enable Upload Entry nav right.css sl-nav__bar True Disable Enable Main Layout: CSS Naming Interop Mobeile Desktop Recommend nav suggest.css sl-layout__recommend True Enable Enable Holder nav container.css sl-layout__holder True Enable Enable","title":"Editor Page"},{"location":"ShaderLabPageEditor/#feature","text":"The core feature of editor page should have two key features: editor, comment. In the web page, should have entrance to home page and login page (conditional).","title":"Feature"},{"location":"ShaderLabPageEditor/#analyze","text":"Navigation Bar: Elements under navigation bar has two stage: - normal -> mini icon. - large -> panel and large icon. Left Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav left.css sl-nav__bar True Enable Disable Right Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav right.css sl-nav__bar True Enable Disable Message Entry nav right.css sl-nav__bar True Disable Enable History Entry nav right.css sl-nav__bar True Disable Enable Upload Entry nav right.css sl-nav__bar True Disable Enable Main Layout: CSS Naming Interop Mobeile Desktop Recommend nav suggest.css sl-layout__recommend True Enable Enable Holder nav container.css sl-layout__holder True Enable Enable","title":"Analyze"},{"location":"ShaderLabPageLogin/","text":"Feature \u00b6 The core feature of login page should be register and login feature. In the web page, should have entrance to main page, Consider to use navigate title. Register could use two different type of account input, email or pure string and password consider have a limit 64 length. Structure design \u00b6 Background, Navigation Bar, Main Panel. Source map \u00b6 CSS Naming Interop Mobeile Desktop Background login.css sl-background None Disable Enable Navigation bar nav.css sl-nav True Disable Enable Main Panel panel.css sl-panel True Enable Enable Interop requirement \u00b6 Name Selector Main page entrance .nav-label Input form #panel-input Register Button .register Login Button .login Analyze \u00b6 Consider use regular rendering because the page only contain few simple DOM tree. So, it could draw all the component once page loaded. Drawing level consideration: Loading step \u00b6 If user already registered, this page should directly redirect to main page. When build consider direction inline the script under header. flowchart TD render[Page Load] --> check{Check local} check --> |has user data| redirect[Redirect to main] check --> |no user data| load[Page render done] load --> |width > 500| image[Lazy load image] load --> action[Button action binding] load --> alert[Loading alert] image ---> End action --> End alert --> End API interop \u00b6 Feature Request Response Page Loading GET api/img/random (Static?) RETURN blob Register POST (Account: string16, password: string32) RETURN JSON Login POST (Account: string16, password: string32) RETURN JSON","title":"Login Page"},{"location":"ShaderLabPageLogin/#feature","text":"The core feature of login page should be register and login feature. In the web page, should have entrance to main page, Consider to use navigate title. Register could use two different type of account input, email or pure string and password consider have a limit 64 length.","title":"Feature"},{"location":"ShaderLabPageLogin/#structure-design","text":"Background, Navigation Bar, Main Panel.","title":"Structure design"},{"location":"ShaderLabPageLogin/#source-map","text":"CSS Naming Interop Mobeile Desktop Background login.css sl-background None Disable Enable Navigation bar nav.css sl-nav True Disable Enable Main Panel panel.css sl-panel True Enable Enable","title":"Source map"},{"location":"ShaderLabPageLogin/#interop-requirement","text":"Name Selector Main page entrance .nav-label Input form #panel-input Register Button .register Login Button .login","title":"Interop requirement"},{"location":"ShaderLabPageLogin/#analyze","text":"Consider use regular rendering because the page only contain few simple DOM tree. So, it could draw all the component once page loaded. Drawing level consideration:","title":"Analyze"},{"location":"ShaderLabPageLogin/#loading-step","text":"If user already registered, this page should directly redirect to main page. When build consider direction inline the script under header. flowchart TD render[Page Load] --> check{Check local} check --> |has user data| redirect[Redirect to main] check --> |no user data| load[Page render done] load --> |width > 500| image[Lazy load image] load --> action[Button action binding] load --> alert[Loading alert] image ---> End action --> End alert --> End","title":"Loading step"},{"location":"ShaderLabPageLogin/#api-interop","text":"Feature Request Response Page Loading GET api/img/random (Static?) RETURN blob Register POST (Account: string16, password: string32) RETURN JSON Login POST (Account: string16, password: string32) RETURN JSON","title":"API interop"},{"location":"ShaderLabPageMain/","text":"Feature \u00b6 The core feature of home page should have three key features: search, user, preview features. In the web page, should have entrance to editor page and login page (conditional). Structure design: Navigation, Layout Navigation: search, filter and user control. CSS Naming Interop Mobeile Desktop Navigation nav.css sl-nav True Enable Enable Main Layout layout.css sl-layout True Enable Enable Analyze \u00b6 This page should contain 50% functions of the application, including search, user, info. Navigation Bar: Elements under navigation bar has two stage: - normal -> mini icon. - large -> panel and large icon. Left Entry: CSS Naming Interop Mobeile Desktop Home Entry nav left.css sl-nav__bar True Disable Enable Login Entry -> shared nav left.css sl-nav__bar True Enable Disable Right Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav right.css sl-nav__bar True Enable Disable Message Entry nav right.css sl-nav__bar True Disable Enable History Entry nav right.css sl-nav__bar True Disable Enable Upload Entry nav right.css sl-nav__bar True Disable Enable Main Layout: CSS Naming Interop Mobeile Desktop Recommend nav suggest.css sl-layout__recommend True Enable Enable Holder nav container.css sl-layout__holder True Enable Enable Layout should get the data from database under ranking . Feature Request Response Page Loading GET /api/post RETURN JSON GET /api/user/vertify RETURN token Search GET /api/post/tag RETURN JSON sequenceDiagram participant local participant client participant server client-->>local: get user info client-->>local: get token local->>client: user? client->>local: render user entry or login entry local->>client: token client->>server: send user server->>client: return new token client->>server: Request /api/post server->>client: Response img.src and name Search panel implement: flowchart TD Static --> focus{On focus} focus --> |No longer focus| End focus --> |Stay| extend[Open large] focus --> |Input > 0| search[Searching] extend ---> |On extend outer| End extend --> |On extend| extend search --> |> 0| extendListLayout[List searching result] search --> |< 0| extend extendListLayout --> End User avatar icon implement: flowchart TD small[User small icon] --> mouseover{On top} mouseover --> |Stay > 0.3s| large[User large icon] mouseover --> |Stay < 0.3s| lockevent[set time out] mouseover --> |Locked| End lockevent --> large large --> leave[Leave] leave --> End","title":"Main Page"},{"location":"ShaderLabPageMain/#feature","text":"The core feature of home page should have three key features: search, user, preview features. In the web page, should have entrance to editor page and login page (conditional). Structure design: Navigation, Layout Navigation: search, filter and user control. CSS Naming Interop Mobeile Desktop Navigation nav.css sl-nav True Enable Enable Main Layout layout.css sl-layout True Enable Enable","title":"Feature"},{"location":"ShaderLabPageMain/#analyze","text":"This page should contain 50% functions of the application, including search, user, info. Navigation Bar: Elements under navigation bar has two stage: - normal -> mini icon. - large -> panel and large icon. Left Entry: CSS Naming Interop Mobeile Desktop Home Entry nav left.css sl-nav__bar True Disable Enable Login Entry -> shared nav left.css sl-nav__bar True Enable Disable Right Entry: CSS Naming Interop Mobeile Desktop Login Entry -> shared nav right.css sl-nav__bar True Enable Disable Message Entry nav right.css sl-nav__bar True Disable Enable History Entry nav right.css sl-nav__bar True Disable Enable Upload Entry nav right.css sl-nav__bar True Disable Enable Main Layout: CSS Naming Interop Mobeile Desktop Recommend nav suggest.css sl-layout__recommend True Enable Enable Holder nav container.css sl-layout__holder True Enable Enable Layout should get the data from database under ranking . Feature Request Response Page Loading GET /api/post RETURN JSON GET /api/user/vertify RETURN token Search GET /api/post/tag RETURN JSON sequenceDiagram participant local participant client participant server client-->>local: get user info client-->>local: get token local->>client: user? client->>local: render user entry or login entry local->>client: token client->>server: send user server->>client: return new token client->>server: Request /api/post server->>client: Response img.src and name Search panel implement: flowchart TD Static --> focus{On focus} focus --> |No longer focus| End focus --> |Stay| extend[Open large] focus --> |Input > 0| search[Searching] extend ---> |On extend outer| End extend --> |On extend| extend search --> |> 0| extendListLayout[List searching result] search --> |< 0| extend extendListLayout --> End User avatar icon implement: flowchart TD small[User small icon] --> mouseover{On top} mouseover --> |Stay > 0.3s| large[User large icon] mouseover --> |Stay < 0.3s| lockevent[set time out] mouseover --> |Locked| End lockevent --> large large --> leave[Leave] leave --> End","title":"Analyze"}]}